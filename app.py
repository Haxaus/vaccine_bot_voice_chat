import streamlit as st
import google.generativeai as genai
from streamlit_mic_recorder import speech_to_text
from gtts import gTTS
import os
from dotenv import load_dotenv

load_dotenv()
GEMINI_API_KEY = st.secrets.get("HF_TOKEN", os.getenv("HF_TOKEN"))
genai.configure(api_key=GEMINI_API_KEY)

def load_gemini_llm():
    if not GEMINI_API_KEY:
        raise ValueError("Gemini API key not found.")
    return genai.GenerativeModel("gemini-2.0-flash")

def clean_text(text):
    return text.replace("**", "").replace("*", "").strip()

def build_context(history, max_messages=5):
    context = ""
    recent_history = history[-max_messages * 2:] if len(history) > max_messages * 2 else history
    vaccination_keywords = ["vacc", "‡§ü‡•Ä‡§ï", "‡¶≠‡ßç‡¶Ø‡¶æ‡¶ï", "‡™µ‡´á‡™ï", "‡≤µ‡≥ç‡≤Ø‡≤æ‡≤ï", "‡¥µ‡¥æ‡¥ï‡µç‡¥∏", "‡§µ‡•à‡§ï‡•ç‡§∏", "‡∞µ‡∞æ‡∞ï‡±ç‡∞∏", "Ÿà€å⁄©ÿ≥", "‡®µ‡©à‡®ï", "measles", "‡§ñ‡§∏‡§∞‡§æ", "rubella", "‡§∞‡•Ç‡§¨‡•á‡§≤‡§æ", "covid", "vitamin", "‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§®"]
    follow_up_keywords = ["where", "‡§ï‡§π‡§æ‡§Å", "online", "‡§ë‡§®‡§≤‡§æ‡§á‡§®", "get", "‡§™‡§æ‡§è‡§Ç", "this", "‡§Ø‡§π", "child", "‡§¨‡§ö‡•ç‡§ö‡§æ", "age", "‡§â‡§Æ‡•ç‡§∞", "portal", "‡§™‡•ã‡§∞‡•ç‡§ü‡§æ‡§≤", "is", "‡§ï‡•ç‡§Ø‡§æ", "does", "‡§¶‡§ø‡§Ø‡§æ", "given", "supplement", "‡§∏‡§™‡•ç‡§≤‡•Ä‡§Æ‡•á‡§Ç‡§ü", "necessary", "‡§ú‡§∞‡•Ç‡§∞‡•Ä"]
    rejection_phrases = ["‡§ï‡•á‡§µ‡§≤ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§", "Ask me only vaccination-related", "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶ï‡¶∏‡¶ø‡¶®‡ßá‡¶∂‡¶®"]
    is_vaccination_context = False
    i = 0

    while i < len(recent_history) - 1:
        user_msg = recent_history[i]
        ai_msg = recent_history[i + 1] if i + 1 < len(recent_history) else None
        
        if user_msg['role'] == 'user' and ai_msg and ai_msg['role'] == 'assistant':
            ai_content_lower = ai_msg['content'].lower()
            if any(phrase in ai_content_lower for phrase in rejection_phrases):
                i += 2
                continue
        
        user_content_lower = user_msg['content'].lower()
        if any(keyword in user_content_lower for keyword in vaccination_keywords) or \
           (is_vaccination_context and any(keyword in user_content_lower for keyword in follow_up_keywords)):
            context += f"Question: {user_msg['content']}\n"
            if ai_msg and ai_msg['role'] == 'assistant':
                context += f"Answer: {ai_msg['content']}\n"
            is_vaccination_context = True
            i += 2
        else:
            is_vaccination_context = False
            i += 1

    return context.strip()

def main():
    # Language dictionary for UI text
    ui_text = {
        "Hindi": {
            "title": "‡§ü‡•Ä‡§ï‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï üáÆüá≥üíâ",
            "subtitle": "‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§™‡§æ‡§è‡§Ç!",
            "lang_label": "‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
            "mic_prompt": "‡§Æ‡§æ‡§á‡§ï ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•á‡§Ç:",
            "stt_spinner": "‡§Ü‡§µ‡§æ‡§ú ‡§ï‡•ã ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
            "tts_spinner": "‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•ã ‡§Ü‡§µ‡§æ‡§ú ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
            "warning": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§á‡§ï ‡§¶‡§¨‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§"
        },
        "English": {
            "title": "Vaccination Assistant üáÆüá≥üíâ",
            "subtitle": "Speak in India's languages and get answers!",
            "lang_label": "Choose response language:",
            "mic_prompt": "Press the mic button and speak:",
            "stt_spinner": "Converting voice to text...",
            "tts_spinner": "Converting answer to voice...",
            "warning": "Please press the mic and speak."
        },
        "Bengali": {
            "title": "‡¶ü‡¶ø‡¶ï‡¶æ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï üáÆüá≥üíâ",
            "subtitle": "‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶®!",
            "lang_label": "‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            "mic_prompt": "‡¶Æ‡¶æ‡¶á‡¶ï ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ ‡¶ü‡¶ø‡¶™‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®:",
            "stt_spinner": "‡¶ï‡¶£‡ßç‡¶†‡¶∏‡ßç‡¶¨‡¶∞‡¶ï‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
            "tts_spinner": "‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ï‡ßá ‡¶ï‡¶£‡ßç‡¶†‡¶∏‡ßç‡¶¨‡¶∞‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...",
            "warning": "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Æ‡¶æ‡¶á‡¶ï ‡¶ü‡¶ø‡¶™‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§"
        },
        "Gujarati": {
            "title": "‡™∞‡™∏‡´Ä ‡™∏‡™π‡™æ‡™Ø‡™ï üáÆüá≥üíâ",
            "subtitle": "‡™≠‡™æ‡™∞‡™§‡™®‡´Ä ‡™≠‡™æ‡™∑‡™æ‡™ì‡™Æ‡™æ‡™Ç ‡™¨‡´ã‡™≤‡´ã ‡™Ö‡™®‡´á ‡™ú‡™µ‡™æ‡™¨ ‡™Æ‡´á‡™≥‡™µ‡´ã!",
            "lang_label": "‡™ú‡™µ‡™æ‡™¨‡™®‡´Ä ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã:",
            "mic_prompt": "‡™Æ‡™æ‡™á‡™ï ‡™¨‡™ü‡™® ‡™¶‡™¨‡™æ‡™µ‡´ã ‡™Ö‡™®‡´á ‡™¨‡´ã‡™≤‡´ã:",
            "stt_spinner": "‡™Ö‡™µ‡™æ‡™ú‡™®‡´á ‡™ü‡´á‡™ï‡´ç‡™∏‡´ç‡™ü‡™Æ‡™æ‡™Ç ‡™∞‡´Ç‡™™‡™æ‡™Ç‡™§‡™∞‡™ø‡™§ ‡™ï‡™∞‡´Ä ‡™∞‡™π‡´ç‡™Ø‡™æ‡™Ç ‡™õ‡´Ä‡™è...",
            "tts_spinner": "‡™ú‡™µ‡™æ‡™¨‡™®‡´á ‡™Ö‡™µ‡™æ‡™ú‡™Æ‡™æ‡™Ç ‡™∞‡´Ç‡™™‡™æ‡™Ç‡™§‡™∞‡™ø‡™§ ‡™ï‡™∞‡´Ä ‡™∞‡™π‡´ç‡™Ø‡™æ‡™Ç ‡™õ‡´Ä‡™è...",
            "warning": "‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™Æ‡™æ‡™á‡™ï ‡™¶‡™¨‡™æ‡™µ‡´ã ‡™Ö‡™®‡´á ‡™¨‡´ã‡™≤‡´ã‡•§"
        },
        "Kannada": {
            "title": "‡≤≤‡≤∏‡≤ø‡≤ï‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï üáÆüá≥üíâ",
            "subtitle": "‡≤≠‡≤æ‡≤∞‡≤§‡≤¶ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤â‡≤§‡≥ç‡≤§‡≤∞ ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø!",
            "lang_label": "‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:",
            "mic_prompt": "‡≤Æ‡≥à‡≤ï‡≥ç ‡≤¨‡≤ü‡≤®‡≥ç ‡≤í‡≤§‡≥ç‡≤§‡≤ø ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø:",
            "stt_spinner": "‡≤ß‡≥ç‡≤µ‡≤®‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤†‡≥ç‡≤Ø‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤™‡≤∞‡≤ø‡≤µ‡≤∞‡≥ç‡≤§‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤µ‡≥Ü...",
            "tts_spinner": "‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø‡≤ó‡≥Ü ‡≤™‡≤∞‡≤ø‡≤µ‡≤∞‡≥ç‡≤§‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤µ‡≥Ü...",
            "warning": "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≥à‡≤ï‡≥ç ‡≤í‡≤§‡≥ç‡≤§‡≤ø ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø‡•§"
        },
        "Malayalam": {
            "title": "‡¥µ‡¥æ‡¥ï‡µç‡¥∏‡¥ø‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø üáÆüá≥üíâ",
            "subtitle": "‡¥á‡¥®‡µç‡¥§‡µç‡¥Ø‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥≠‡¥æ‡¥∑‡¥ï‡¥≥‡¥ø‡µΩ ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡¥Ø‡µÅ‡¥Ç ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥®‡µá‡¥ü‡µÅ‡¥ï‡¥Ø‡µÅ‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï!",
            "lang_label": "‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥ï‡¥∞‡¥£ ‡¥≠‡¥æ‡¥∑ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï:",
            "mic_prompt": "‡¥Æ‡µà‡¥ï‡µç‡¥ï‡µç ‡¥¨‡¥ü‡µç‡¥ü‡µ∫ ‡¥Ö‡¥Æ‡µº‡¥§‡µç‡¥§‡¥ø ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï:",
            "stt_spinner": "‡¥∂‡¥¨‡µç‡¥¶‡¥§‡µç‡¥§‡µÜ ‡¥µ‡¥æ‡¥ö‡¥ï‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥ø ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µÅ‡¥®‡µç‡¥®‡µÅ...",
            "tts_spinner": "‡¥â‡¥§‡µç‡¥§‡¥∞‡¥§‡µç‡¥§‡µÜ ‡¥∂‡¥¨‡µç‡¥¶‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥ø ‡¥Æ‡¥æ‡¥±‡µç‡¥±‡µÅ‡¥®‡µç‡¥®‡µÅ...",
            "warning": "‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥Æ‡µà‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥Æ‡µº‡¥§‡µç‡¥§‡¥ø ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡•§"
        },
        "Marathi": {
            "title": "‡§≤‡§∏‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï üáÆüá≥üíâ",
            "subtitle": "‡§≠‡§æ‡§∞‡§§‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§∑‡§æ‡§Ç‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¨‡•ã‡§≤‡§æ ‡§Ü‡§£‡§ø ‡§â‡§§‡•ç‡§§‡§∞‡•á ‡§Æ‡§ø‡§≥‡§µ‡§æ!",
            "lang_label": "‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ö‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ:",
            "mic_prompt": "‡§Æ‡§æ‡§á‡§ï ‡§¨‡§ü‡§£ ‡§¶‡§æ‡§¨‡§æ ‡§Ü‡§£‡§ø ‡§¨‡•ã‡§≤‡§æ:",
            "stt_spinner": "‡§Ü‡§µ‡§æ‡§ú‡§æ‡§≤‡§æ ‡§Æ‡§ú‡§ï‡•Å‡§∞‡§æ‡§§ ‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•ã‡§§...",
            "tts_spinner": "‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§≤‡§æ ‡§Ü‡§µ‡§æ‡§ú‡§æ‡§§ ‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•ã‡§§...",
            "warning": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§æ‡§á‡§ï ‡§¶‡§æ‡§¨‡§æ ‡§Ü‡§£‡§ø ‡§¨‡•ã‡§≤‡§æ‡•§"
        },
        "Tamil": {
            "title": "‡Æ§‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡ØÇ‡Æö‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç üáÆüá≥üíâ",
            "subtitle": "‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Ææ‡Æµ‡Æø‡Æ©‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æ™‡Øá‡Æö‡Æø ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç!",
            "lang_label": "‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:",
            "mic_prompt": "‡ÆÆ‡Øà‡Æï‡Øç ‡Æ™‡Øä‡Æ§‡Øç‡Æ§‡Ææ‡Æ©‡Øà ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡Æø ‡Æ™‡Øá‡Æö‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:",
            "stt_spinner": "‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øà ‡Æâ‡Æ∞‡Øà‡ÆØ‡Ææ‡Æï ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç...",
            "tts_spinner": "‡Æ™‡Æ§‡Æø‡Æ≤‡Øà ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Ææ‡Æï ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç...",
            "warning": "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡Øà‡Æï‡Øç ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡Æø ‡Æ™‡Øá‡Æö‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç‡•§"
        },
        "Telugu": {
            "title": "‡∞µ‡∞æ‡∞ï‡±ç‡∞∏‡∞ø‡∞®‡±ç ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å üáÆüá≥üíâ",
            "subtitle": "‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂ ‡∞≠‡∞æ‡∞∑‡∞≤‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø!",
            "lang_label": "‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞® ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:",
            "mic_prompt": "‡∞Æ‡±à‡∞ï‡±ç ‡∞¨‡∞ü‡∞®‡±ç ‡∞®‡±ä‡∞ï‡±ç‡∞ï‡∞ø ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø:",
            "stt_spinner": "‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç‚Äå‡∞®‡±Å ‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç‚Äå‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞∞‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å...",
            "tts_spinner": "‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç‚Äå‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞∞‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å...",
            "warning": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±à‡∞ï‡±ç ‡∞®‡±ä‡∞ï‡±ç‡∞ï‡∞ø ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø‡•§"
        },
        "Urdu": {
            "title": "Ÿà€å⁄©ÿ≥€åŸÜ ÿßÿ≥ÿ≥ŸπŸÜŸπ üáÆüá≥üíâ",
            "subtitle": "ÿ®⁄æÿßÿ±ÿ™ ⁄©€å ÿ≤ÿ®ÿßŸÜŸà⁄∫ ŸÖ€å⁄∫ ÿ®ŸàŸÑ€å⁄∫ ÿßŸàÿ± ÿ¨Ÿàÿßÿ®ÿßÿ™ ÿ≠ÿßÿµŸÑ ⁄©ÿ±€å⁄∫!",
            "lang_label": "ÿ¨Ÿàÿßÿ® ⁄©€å ÿ≤ÿ®ÿßŸÜ ŸÖŸÜÿ™ÿÆÿ® ⁄©ÿ±€å⁄∫:",
            "mic_prompt": "ŸÖÿßÿ¶⁄© ÿ®ŸπŸÜ ÿØÿ®ÿßÿ¶€å⁄∫ ÿßŸàÿ± ÿ®ŸàŸÑ€å⁄∫:",
            "stt_spinner": "ÿ¢Ÿàÿßÿ≤ ⁄©Ÿà ŸÖÿ™ŸÜ ŸÖ€å⁄∫ ÿ™ÿ®ÿØ€åŸÑ ⁄©ÿ± ÿ±€Å€í €Å€å⁄∫...",
            "tts_spinner": "ÿ¨Ÿàÿßÿ® ⁄©Ÿà ÿ¢Ÿàÿßÿ≤ ŸÖ€å⁄∫ ÿ™ÿ®ÿØ€åŸÑ ⁄©ÿ± ÿ±€Å€í €Å€å⁄∫...",
            "warning": "ÿ®ÿ±ÿß€Å ⁄©ÿ±ŸÖ ŸÖÿßÿ¶⁄© ÿØÿ®ÿßÿ¶€å⁄∫ ÿßŸàÿ± ÿ®ŸàŸÑ€å⁄∫€î"
        },
        "Punjabi": {
            "title": "‡®ü‡©Ä‡®ï‡®æ‡®ï‡®∞‡®® ‡®∏‡®π‡®æ‡®á‡®ï üáÆüá≥üíâ",
            "subtitle": "‡®≠‡®æ‡®∞‡®§ ‡®¶‡©Ä‡®Ü‡®Ç ‡®≠‡®æ‡®∏‡®º‡®æ‡®µ‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®¨‡©ã‡®≤‡©ã ‡®Ö‡®§‡©á ‡®ú‡®µ‡®æ‡®¨ ‡®™‡©ç‡®∞‡®æ‡®™‡®§ ‡®ï‡®∞‡©ã!",
            "lang_label": "‡®ú‡®µ‡®æ‡®¨ ‡®¶‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©ã:",
            "mic_prompt": "‡®Æ‡®æ‡®à‡®ï ‡®¨‡®ü‡®® ‡®¶‡®¨‡®æ‡®ì ‡®Ö‡®§‡©á ‡®¨‡©ã‡®≤‡©ã:",
            "stt_spinner": "‡®Ü‡®µ‡®æ‡®ú‡®º ‡®®‡©Ç‡©∞ ‡®ü‡©à‡®ï‡®∏‡®ü ‡®µ‡®ø‡©±‡®ö ‡®¨‡®¶‡®≤ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...",
            "tts_spinner": "‡®ú‡®µ‡®æ‡®¨ ‡®®‡©Ç‡©∞ ‡®Ü‡®µ‡®æ‡®ú‡®º ‡®µ‡®ø‡©±‡®ö ‡®¨‡®¶‡®≤ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...",
            "warning": "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Æ‡®æ‡®à‡®ï ‡®¶‡®¨‡®æ‡®ì ‡®Ö‡®§‡©á ‡®¨‡©ã‡®≤‡©ã‡•§"
        }
    }

    if 'messages' not in st.session_state:
        st.session_state.messages = []
    if 'recording_count' not in st.session_state:
        st.session_state.recording_count = 0
    if 'recording_active' not in st.session_state:
        st.session_state.recording_active = False

    # Set Hindi as default language initially
    if 'selected_lang' not in st.session_state:
        st.session_state.selected_lang = "Hindi"

    languages = {
        "Hindi": "hi", "English": "en", "Bengali": "bn", "Gujarati": "gu", "Kannada": "kn",
        "Malayalam": "ml", "Marathi": "mr", "Tamil": "ta", "Telugu": "te", "Urdu": "ur", "Punjabi": "pa"
    }
       

    lang_keys = list(languages.keys())
    selected_lang = st.selectbox(
        "‡§ú‡§µ‡§æ‡§¨ ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",  # Static Hindi label
        lang_keys,
        index=lang_keys.index("Hindi")  # Pre-select Hindi
    )
    st.session_state.selected_lang = selected_lang  # Update session state
    lang_code = languages[selected_lang]

    # Use session state to persist selected language, default to Hindi
    st.title(ui_text[st.session_state.selected_lang]["title"])
    st.write(ui_text[st.session_state.selected_lang]["subtitle"])
    
    

    for message in st.session_state.messages:
        st.chat_message(message['role']).markdown(message['content'])

    st.write(ui_text[selected_lang]["mic_prompt"])
    with st.spinner(ui_text[selected_lang]["stt_spinner"]):
        raw_text = speech_to_text(
            language=lang_code,
            use_container_width=True,
            key=f"STT_{st.session_state.recording_count}"
        )

    if raw_text and not st.session_state.recording_active:
        try:
            st.session_state.recording_active = True
            llm = load_gemini_llm()
            context = build_context(st.session_state.messages, max_messages=5)

            rejection_messages = {
                "Hindi": "‡§ï‡•á‡§µ‡§≤ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§",
                "English": "Ask me only vaccination-related questions.",
                "Bengali": "‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶ï‡¶∏‡¶ø‡¶®‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                "Gujarati": "‡™Æ‡™®‡´á ‡™´‡™ï‡´ç‡™§ ‡™∞‡™∏‡´Ä‡™ï‡™∞‡™£ ‡™∏‡™Ç‡™¨‡™Ç‡™ß‡™ø‡™§ ‡™™‡´ç‡™∞‡™∂‡´ç‡™®‡´ã ‡™™‡´Ç‡™õ‡´ã‡•§",
                "Kannada": "‡≤®‡≤®‡≤ó‡≥Ü ‡≤ï‡≥á‡≤µ‡≤≤ ‡≤≤‡≤∏‡≤ø‡≤ï‡≥Ü ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ø‡≤§ ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≥á‡≤≥‡≤ø‡•§",
                "Malayalam": "‡¥µ‡¥æ‡¥ï‡µç‡¥∏‡¥ø‡¥®‡µá‡¥∑‡¥®‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡•§",
                "Marathi": "‡§Æ‡§≤‡§æ ‡§´‡§ï‡•ç‡§§ ‡§≤‡§∏‡•Ä‡§ï‡§∞‡§£‡§æ‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ø‡§ö‡§æ‡§∞‡§æ‡•§",
                "Tamil": "‡Æ§‡Æü‡ØÅ‡Æ™‡Øç‡Æ™‡ØÇ‡Æö‡Æø ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡Ææ‡Æ© ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡Æï‡Æ≥‡Øà ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç‡•§",
                "Telugu": "‡∞®‡∞æ‡∞ï‡±Å ‡∞ï‡±á‡∞µ‡∞≤‡∞Ç ‡∞µ‡∞æ‡∞ï‡±ç‡∞∏‡∞ø‡∞®‡±á‡∞∑‡∞®‡±ç ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡±Å ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø‡•§",
                "Urdu": "ŸÖÿ¨⁄æ ÿ≥€í ÿµÿ±ŸÅ Ÿà€å⁄©ÿ≥€åŸÜ€åÿ¥ŸÜ ÿ≥€í ŸÖÿ™ÿπŸÑŸÇ ÿ≥ŸàÿßŸÑÿßÿ™ ŸæŸà⁄Ü⁄æ€å⁄∫€î",
                "Punjabi": "‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®∏‡®ø‡®∞‡®´ ‡®ü‡©Ä‡®ï‡®æ‡®ï‡®∞‡®® ‡®®‡®æ‡®≤ ‡®∏‡®¨‡©∞‡®ß‡®§ ‡®∏‡®µ‡®æ‡®≤ ‡®™‡©Å‡©±‡®õ‡©ã‡•§"
            }

            prompt = (
                f"You are a vaccination assistant for India. Answer all questions in {selected_lang}, including rejections. "
                "A question is vaccination-related if it contains terms like 'vaccine', 'vaccination', '‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£', 'measles', '‡§ñ‡§∏‡§∞‡§æ', 'rubella', '‡§∞‡•Ç‡§¨‡•á‡§≤‡§æ', 'covid', 'vitamin', '‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§®', "
                "or follow-up terms like 'where', '‡§ï‡§π‡§æ‡§Å', 'get', '‡§™‡§æ‡§è‡§Ç', 'this', '‡§Ø‡§π', 'child', '‡§¨‡§ö‡•ç‡§ö‡§æ', 'is', '‡§ï‡•ç‡§Ø‡§æ', 'does', '‡§¶‡§ø‡§Ø‡§æ', 'given', 'supplement', '‡§∏‡§™‡•ç‡§≤‡•Ä‡§Æ‡•á‡§Ç‡§ü', 'necessary', '‡§ú‡§∞‡•Ç‡§∞‡•Ä' "
                "after a vaccination question. Use the context below only if the question relates to it. "
                "If the question is not vaccination-related, respond with exactly: '{rejection_messages[selected_lang]}' and ignore context. "
                f"Previous Vaccination-Related Context (if relevant):\n{context}\n\n"
                f"Current Question: {raw_text}"
            )

            response = llm.generate_content(prompt)
            answer = clean_text(response.text)

            output_text = f"{raw_text}  \n{answer}"
            st.chat_message('user').markdown(raw_text)
            st.chat_message('assistant').markdown(output_text)
            st.session_state.messages.append({'role': 'user', 'content': raw_text})
            st.session_state.messages.append({'role': 'assistant', 'content': answer})

            with st.spinner(ui_text[selected_lang]["tts_spinner"]):
                tts = gTTS(text=answer, lang=lang_code, tld="co.in")
                tts.save("output.mp3")
                st.audio("output.mp3")

            st.session_state.recording_count += 1
            st.session_state.recording_active = False
            st.rerun()

        except Exception as e:
            st.error(f"‡§ï‡•ã‡§à ‡§ó‡§°‡§º‡§¨‡§°‡§º‡•Ä: {str(e)}")  # Consider localizing if desired
            st.session_state.recording_active = False
            st.rerun()
    elif not raw_text and st.session_state.recording_active:
        st.session_state.recording_active = False
        st.rerun()
    else:
        st.warning(ui_text[selected_lang]["warning"])

if __name__ == "__main__":
    main()
